# Query: axios.
# ContextLines: 1

38 results - 13 files

frontend\src\__tests__\HomeScreen.test.js:
   91      expect(CacheService.get).toHaveBeenCalledWith('user_statistics', 60);
   92:     expect(axios.get).not.toHaveBeenCalled();
   93    });

   97      
   98:     axios.get.mockImplementation((url) => {
   99        if (url === 'http://10.0.2.2:5000/api/events/upcoming') {

  110      expect(CacheService.get).toHaveBeenCalledWith('upcoming_events', 15);
  111:     expect(axios.get).toHaveBeenCalledWith('http://10.0.2.2:5000/api/events/upcoming');
  112      expect(CacheService.set).toHaveBeenCalledWith('upcoming_events', mockUpcomingEvents);

frontend\src\__tests__\NotificationsScreen.test.js:
   72      expect(CacheService.get).toHaveBeenCalledWith('notifications', 5);
   73:     expect(axios.get).not.toHaveBeenCalled();
   74    });

   77      CacheService.get.mockResolvedValue(null);
   78:     axios.get.mockResolvedValue({ data: mockNotifications });
   79  

   86      expect(CacheService.get).toHaveBeenCalledWith('notifications', 5);
   87:     expect(axios.get).toHaveBeenCalledWith('http://10.0.2.2:5000/api/notifications');
   88      expect(CacheService.set).toHaveBeenCalledWith('notifications', mockNotifications);

   92      CacheService.get.mockResolvedValue(mockNotifications);
   93:     axios.put.mockResolvedValue({ data: { success: true } });
   94  

  102      await waitFor(() => {
  103:       expect(axios.put).toHaveBeenCalledWith('http://10.0.2.2:5000/api/notifications/notif1/read');
  104        expect(navigation.navigate).toHaveBeenCalledWith('Events', {

  112      CacheService.get.mockResolvedValue(mockNotifications);
  113:     axios.put.mockResolvedValue({ data: { success: true } });
  114  

  120      await waitFor(() => {
  121:       expect(axios.put).toHaveBeenCalledWith('http://10.0.2.2:5000/api/notifications/read-all');
  122        expect(CacheService.set).toHaveBeenCalled();

  136      CacheService.get.mockResolvedValue(mockNotifications);
  137:     axios.put.mockResolvedValue({ data: { success: true } });
  138  

frontend\src\__tests__\RepertoireScreen.test.js:
  112      expect(CacheService.get).toHaveBeenCalledWith('songs_map', 15);
  113:     expect(axios.get).not.toHaveBeenCalled();
  114    });

  119      
  120:     axios.get.mockImplementation((url) => {
  121        if (url === 'http://10.0.2.2:5000/api/repertoires') {

  138      expect(CacheService.get).toHaveBeenCalledWith('repertoires', 15);
  139:     expect(axios.get).toHaveBeenCalledWith('http://10.0.2.2:5000/api/repertoires');
  140      expect(CacheService.set).toHaveBeenCalledWith('repertoires', mockRepertoires);

frontend\src\__tests__\ScalesScreen.test.js:
   85      expect(CacheService.get).toHaveBeenCalledWith('events_map', 15);
   86:     expect(axios.get).not.toHaveBeenCalled();
   87    });

   92      
   93:     axios.get.mockImplementation((url) => {
   94        if (url === 'http://10.0.2.2:5000/api/scales') {

  108      expect(CacheService.get).toHaveBeenCalledWith('scales', 15);
  109:     expect(axios.get).toHaveBeenCalledWith('http://10.0.2.2:5000/api/scales');
  110      expect(CacheService.set).toHaveBeenCalledWith('scales', mockScales);

  120  
  121:     axios.put.mockResolvedValue({ data: { success: true } });
  122  

  128      await waitFor(() => {
  129:       expect(axios.put).toHaveBeenCalledWith(
  130          'http://10.0.2.2:5000/api/scales/scale2/confirm',

  143  
  144:     axios.get.mockResolvedValue({ data: [] });
  145      ExportService.exportScaleToPDF.mockResolvedValue('file:///path/to/pdf');

frontend\src\screens\main\AddSongScreen.js:
  15      try {
  16:       await api.post('http://10.0.2.2:5000/api/songs', { name, url });
  17        Alert.alert('Sucesso', 'Música adicionada com sucesso!');

frontend\src\screens\main\ChatScreen.js:
  24      try {
  25:       const res = await api.get(`${BASE_URL}/api/events/${eventId}`);
  26        const event = res.data;

  47      try {
  48:       const res = await api.get(`${BASE_URL}/api/messages/${eventId}`);
  49        setMessages(res.data || []);

  58      try {
  59:       const res = await api.post(`${BASE_URL}/api/messages/${eventId}`, {
  60          content: newMessage,

frontend\src\screens\main\HomeScreen.js:
  68        }
  69:       const response = await api.get('http://10.0.2.2:5000/api/events/upcoming');
  70        const eventsData = response.data;

frontend\src\screens\main\ProfileScreen.js:
  81        // Simulando chamada à API (em um app real, seria uma chamada real)
  82:       // await api.put('http://10.0.2.2:5000/api/profile', editedProfile);
  83        

frontend\src\screens\main\ScalesScreen.js:
   35  
   36:       const response = await api.get('http://10.0.2.2:5000/api/scales');
   37        const scalesData = response.data;

   70  
   71:       const eventsResponse = await api.get('http://10.0.2.2:5000/api/events');
   72        const eventsData = eventsResponse.data;

   90      try {
   91:       await api.put(`http://10.0.2.2:5000/api/scales/${scaleId}/confirm`, { confirmed });
   92        const updatedScales = scales.map(scale => scale._id === scaleId ? { ...scale, confirmed } : scale);

  107  
  108:       const membersResponse = await api.get(`http://10.0.2.2:5000/api/scales/${scale._id}/members`);
  109        const members = membersResponse.data;

frontend\src\screens\main\SettingsScreen.js:
   84        // Simulando chamada à API (em um app real, seria uma chamada real)
   85:       // await api.put('http://10.0.2.2:5000/api/settings', {
   86        //   category,

  133        // Simulando chamada à API (em um app real, seria uma chamada real)
  134:       // await api.put('http://10.0.2.2:5000/api/auth/password', {
  135        //   currentPassword,

  169        // Simulando chamada à API (em um app real, seria uma chamada real)
  170:       // await api.delete('http://10.0.2.2:5000/api/auth/account');
  171        

frontend\src\services\api.js:
  3  
  4: const api = axios.create({
  5    baseURL: 'https://louvor-backend-production.up.railway.app/api',

frontend\src\utils\apiHealthCheck.js:
  10    try {
  11:     await axios.get('http://10.0.2.2:5000/api/ping');
  12      return true;

frontend\src\utils\apiService.js:
   4  
   5: const api = axios.create({
   6    baseURL: config.API_BASE_URL,

  23  export const loginUser = async (email, password) => {
  24:   const response = await axios.post(`${config.API_BASE_URL}/auth/login`, { email, password });
  25    if (response.data.token && response.data.user) {

  32  export const registerUser = async (name, email, password, role) => {
  33:   const response = await axios.post(`${config.API_BASE_URL}/auth/register`, { name, email, password, role });
  34    return response.data;
